import { Box, Button, Stack, Skeleton, Link, Flex } from '@chakra-ui/react';
import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { useState } from 'react';
import { create } from 'ipfs-http-client';

const projectId = process.env.NEXT_PUBLIC_INFRA_PROJECT_ID;
const projectSecret = process.env.NEXT_PUBLIC_INFRA_SECRET;
const projectIdAndSecret = `${projectId}:${projectSecret}`;

/*
const ipfs = create({
  host: 'ipfs.nifty.ink',
  port: 3001,
  protocol: 'https',
});
*/

const ipfs = create({
  host: 'ipfs.infura.io',
  port: 5001,
  protocol: 'https',
  headers: {
    authorization: `Basic ${Buffer.from(projectIdAndSecret).toString(
      'base64'
    )}`,
  },
});

const getFromIPFS = async (cid: string) => {
  const decoder = new TextDecoder();
  let content = '';
  for await (const chunk of ipfs.cat(cid)) {
    content += decoder.decode(chunk);
  }
  return content;
};

const gesturalOptions = [
  'Dripping',
  'Splattering',
  'Smearing',
  'Brushwork',
  'Scumbling',
];

const abstractionOptions = [
  'Non-figurative',
  'Lyrical',
  'Geometric',
  'Minimalist',
  'Cubist',
];
const artistOptions = [
  'Jackson Pollock',
  'Willem de Kooning',
  'Mark Rothko',
  'Lee Krasners',
  'Joan Mitchell',
];

const Home: NextPage = () => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [apiOutput, setApiOutput] = useState('');
  const [gestural, setGestural] = useState(gesturalOptions[0]);
  const [abstraction, setAbstraction] = useState(abstractionOptions[0]);
  const [artist, setArtist] = useState(artistOptions[0]);

  const callGenerateEndpoint = async () => {
    setIsGenerating(true);

    console.log('Calling OpenAI...');

    const prompt = `A ${gestural}, ${abstraction} painting in the style of ${artist}`;

    const response = await fetch('/api/generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ prompt }),
    });

    const data = await response.json();
    const { url } = data;

    console.log(url);

    setApiOutput(`${url}`);
    setIsGenerating(false);
  };

  const handleMint = async () => {
    const mintJson = {
      name: 'AI Art',
      description: `A ${gestural}, ${abstraction} painting in the style of ${artist}`,
      image: apiOutput,
      attributes: [
        { trait_type: 'Gestural', value: gestural },
        { trait_type: 'Abstraction', value: abstraction },
        { trait_type: 'Artist', value: artist },
      ],
    };
    const uploaded = await ipfs.add(JSON.stringify(mintJson));
    console.log('Uploaded Hash: ', uploaded);
  };
  return (
    <div>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box>
        {gesturalOptions.map((item) => (
          <Button
            key={item}
            variant={'outline'}
            colorScheme={item === gestural ? 'black' : 'gray'}
            size="sm"
            onClick={() => setGestural(item)}
          >
            {item}
          </Button>
        ))}
      </Box>
      <Box>
        {abstractionOptions.map((item) => (
          <Button
            key={item}
            variant={'outline'}
            colorScheme={item === abstraction ? 'black' : 'gray'}
            size="sm"
            onClick={() => setAbstraction(item)}
          >
            {item}
          </Button>
        ))}
      </Box>
      <Box>
        {artistOptions.map((item) => (
          <Button
            key={item}
            variant={'outline'}
            colorScheme={item === artist ? 'black' : 'gray'}
            size="sm"
            onClick={() => setArtist(item)}
          >
            {item}
          </Button>
        ))}
      </Box>

      <Stack maxW="400px" mx="auto">
        {apiOutput ? (
          <Box width={400} height={400} position="relative">
            <Skeleton zIndex={0} position="absolute" width={400} height={400} />
            <Box zIndex={1} width={400} height={400} position="absolute">
              <Image src={apiOutput} alt="AI" width={400} height={400} />
            </Box>
          </Box>
        ) : (
          <Button
            isLoading={isGenerating}
            onClick={callGenerateEndpoint}
            width={400}
            height={400}
          >
            Generate
          </Button>
        )}
        {apiOutput !== '' && (
          <Flex gap="2">
            <Button
              colorScheme="teal"
              variant="outline"
              w="full"
              onClick={() => setApiOutput('')}
            >
              Reset
            </Button>
            <Button
              variant="solid"
              w="full"
              colorScheme="teal"
              onClick={handleMint}
            >
              Mint
            </Button>
          </Flex>
        )}
      </Stack>
    </div>
  );
};

export default Home;
